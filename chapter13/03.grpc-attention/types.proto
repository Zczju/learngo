syntax = "proto3";

package main;

// unable to determine Go import path for "types.proto"
// 出现上述错误，找不到路径，加入下面一行命令，再运行 protoc --go_out=. --plugin= types.proto ，则生成了types.pb.go文件。
option go_package = "./main"; // 放.pb.go文件的路径，且文件夹名，为包名。

// service用的是这个命令生成.pb.go文件    protoc -I . --go_out=plugins=grpc:. *.proto
service RankService{
  rpc Register(PersonalInformation) returns(PersonalInformation){}
  rpc Update(PersonalInformation) returns(PersonalInformationFatRate){}
  rpc GetFatRate(PersonalInformation) returns(PersonalRank){}
  rpc GetTop(null)returns(PersonalRanks){}

  rpc RegisterPersons(stream PersonalInformation) returns (PersonalInformationList){}
  rpc WatchPersons(null)returns(stream PersonalInformation){} // 参数不能空 watch 谁  //这里是watch所有人
}

message null{}

message PersonalRanks{
  repeated PersonalRank personalRanks =  1;//类型PersonalRank； 变量名：personalRanks
}

message PersonalRank{
  string name = 1;
  string sex =2 ;
  int64 rankNumber = 3;
  float fatRate = 4;
}

message PersonalInformationFatRate{
  string name = 1;
  float fatRate= 2; //这里小写，grpc里也会大写的。（大写应该是方便JSON的使用要求）
}


message PersonalInformationList{
    repeated PersonalInformation items = 1;
}

message PersonalInformation{
  // @gotags: gorm:"primaryKey; column:id" //注意这个一定要写 不要忘了Key
  int64 id = 1; // 这些数不能改
  // @gotags: gorm:"column:name" // 这个要手写么？ 反正必须要有 protoc-go-inject-tag -input="*.pb.go"就需要读取这个tag
  string name = 2;
  // @gotags: gorm:"column:sex"
  string sex = 3;
  // @gotags: gorm:"column:tall"
  float tall = 4;
  // @gotags: gorm:"column:weight"
  float weight = 5;
  // @gotags: gorm:"column:age"
  int64 age = 6;
  string nation = 7; //可以增加，但不能删除。之前的不用也空着，不能删除
  //string extra = 8; // 这样可以扩展
  repeated ExtraInfo extras = 8;
}

message ExtraInfo{// 用于扩展 用于妥协，因为proto没法直接用map等类型，类似这样的使用方法，间接实现proto的map类型。
  string key = 1;
  string value = 2;
}