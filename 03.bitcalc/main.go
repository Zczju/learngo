package main

import "fmt"

func main() {

	a, b := 100, 31
	fmt.Printf("%d,%b\n", a, a) //100, 0110 0100
	fmt.Printf("%d,%b\n", b, b) //31,  0001 1111
	c := a ^ b                  //异或 两数中，都是0，则是0；都是1，则是0；有一个1，则是1。 成对出现则是0，有一个1，一个0，则是1
	fmt.Printf("%d,%b\n", c, c) //123, 0111 1011
	fmt.Println(b ^ a)

	//清空位
	d := a &^ b                 //相对b来说，如果b的该位是0，则取a该位的值，如果b的该位是1，则直接取0。
	fmt.Printf("%d,%b\n", d, d) // 96, 0110 0000

	arr := []int{4, 3, 4, 5, 6, 7, 3, 5, 6}
	// 0100, 0011, 0100, 0101, 0110, 0111, 0011, 0101, 0110
	// 0111 	   0100, 0101, 0110, 0111, 0011, 0101, 0110
	// 0011				 0101, 0110, 0111, 0011, 0101, 0110
	// 0110					   0110, 0111, 0011, 0101, 0110
	// 0000						     0111, 0011, 0101, 0110
	// 0111								   0011, 0101, 0110
	// 0100								         0101, 0110
	// 0001											   0110
	// 0111
	// 异或可以不管位置，如果4和4异或，得0，0跟任意数异或则得原数。在众多成对出现的数中，通过异或可以很快找出落单的数（单身狗比较显眼？）。
	result := -1
	for _, item := range arr {
		fmt.Println("???", item)
		if result < 0 {
			result = item
			fmt.Println(result)
		} else {
			result = result ^ item
			fmt.Printf("%d, %b\n", result, result)
		}
	}
	fmt.Println(result)
}
